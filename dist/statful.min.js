/**
* statful-client-javascript 2.0.2
* Copyright 2017 Statful <https://www.statful.com/>
*/

!function(a){'use strict';function b(a){this.debugEnabled=a||!1}b.prototype.info=function(){if(this.debugEnabled){var a=Array.prototype.slice.call(arguments);console.info.apply(console,a)}},b.prototype.debug=function(){if(this.debugEnabled){var a=Array.prototype.slice.call(arguments);console.debug.apply(console,a)}},b.prototype.error=function(){if(this.debugEnabled){var a=Array.prototype.slice.call(arguments);console.error.apply(console,a)}},a.StatfulLogger=b}(window),function(a){'use strict';function b(a){a=a||{};var b,c=this;this.config={},this.constants={aggregationList:['avg','count','sum','first','last','p90','p95','min','max'],aggregationFrequencyList:[10,30,60,120,180,300]},Object.keys(a).forEach(function(b){c.config[b]=a[b]}),this.listQueues=[],b=new StatfulLogger(c.config.debug),this.sendRequest=function(c,d){var e=[this.config.apiAddress,c],f=e.join('/');b.debug('Request: '+f,d);var g=new XMLHttpRequest;g.open('POST',f,!0),g.timeout=a.timeout,g.setRequestHeader('Content-type','application/json'),g.send(d),g.onreadystatechange=function(){200==g.status||201==g.status?b.debug('Successfully send metric'):b.debug('Error send metric',f,g.status)}},this.registerQueue=function(a,c,d){if(d=d||this.config.flushInterval,'string'==typeof a&&'number'==typeof d){var e=this;return this.listQueues[a]={data:[],endpoint:c},this.listQueues[a].timer=setInterval(function(){var c=e.listQueues[a];c.data.length>0&&(e.config.dryrun?b.debug('Dryrun data',c.endpoint,c.data):e.sendRequest(c.endpoint,JSON.stringify(c.data)),c.data=[])},d),!0}return!1},this.unregisterQueue=function(a){this.listQueues[a]&&(clearInterval(this.listQueues[a].timer),this.listQueues[a]=void 0)},this.addItemToQueue=function(a,c){var d=(c.sampleRate||this.config.sampleRate||100)/100;return this.listQueues[a]&&Math.random()<=d?(this.listQueues[a].data.push(c),!0):(b.debug('Metric was discarded due to sample rate.'),!1)},this.setAggregations=function(a,b,c){function d(a,b,c){return a&&c.indexOf(a)===b}var e=b;return e=e.concat(c).filter(d),e=a?e.concat(a).filter(d):e||[],this.filterAggregations(e)},this.setTags=function(a,b,c,d){var e={};return Object.keys(b).forEach(function(a){e[a]=b[a]}),Object.keys(c).forEach(function(a){e[a]=c[a]}),Object.keys(a).forEach(function(b){e[b]=a[b]}),!e.app&&d&&(e.app=d),e},this.setAggregationFrequency=function(a,b,c){var d=b;return c&&(d=c),a&&(d=a),this.filterAggregationFrequency(d)},this.filterAggregations=function(a){var b=this.constants.aggregationList;return a=a||[],a.filter(function(a){return-1!==b.indexOf(a)})},this.filterAggregationFrequency=function(a){var b=this.constants.aggregationFrequencyList,c=10;return b.indexOf(a)>-1&&(c=a),c}}a.StatfulUtil=b}(window),function(a){'use strict';var b,c={dryrun:!1,debug:!1,app:void 0,namespace:'web',tags:{},aggregations:[],aggregationFrequency:10,timer:{tags:{unit:'ms'},aggregations:['avg','p90','count']},counter:{tags:{},aggregations:['sum','count']},gauge:{tags:{},aggregations:['last']},timeout:2e3,flushInterval:1e4,sampleRate:100},d={config:{apiAddress:'https://beacon.statful.com'},endpoints:{metrics:'beacon/metrics'},perf:a.performance,initialize:function(a){var d=this;d.mergeConfigs=function(a){'object'==typeof a&&null!==a||(a={}),Object.keys(c).forEach(function(a){d.config[a]=c[a]}),Object.keys(a).forEach(function(b){d.config[b]=a[b]})},d.metricsData=function(a,b,c,e,f,g,h,i){return{name:a,type:b,value:c,tags:d.util.setTags(e||{},d.config.tags,d.config[b].tags,d.config.app),aggregations:d.util.setAggregations(f,d.config.aggregations,d.config[b].aggregations),aggregationFrequency:d.util.setAggregationFrequency(g,d.config.aggregationFrequency,d.config[b].aggregationFrequency),namespace:h||d.config.namespace,sampleRate:i||d.config.sampleRate}},this.mergeConfigs(a),b=new StatfulLogger(d.config.debug),d.util=new StatfulUtil({apiAddress:this.config.apiAddress,debug:this.config.debug,dryrun:this.config.dryrun,flushInterval:this.config.flushInterval,timeout:this.config.timeout}),d.util.registerQueue('metrics',this.endpoints.metrics,this.config.flushInterval)},measureTimeUserTiming:function(a){var c,e=d.perf.getEntriesByName(a).filter(function(a){return'measure'===a.entryType});return e.length>0?c=e[e.length-1].duration:b.debug('Measure '+a+' not found'),c},clearMarks:function(a){try{a?a.forEach(function(a){a&&d.perf.clearMarks(a)}):d.perf.clearMarks()}catch(a){b.error(a)}},clearResources:function(){try{d.perf.clearResourceTimings()}catch(a){b.error(a)}},clearMeasures:function(a){try{a?a.forEach(function(a){d.perf.clearMeasures(a)}):d.perf.clearMeasures()}catch(a){b.error(a)}},registerMark:function(a){try{b.debug('Register Mark',a),a?d.perf.mark(a):b.error('Undefined resource name to register as a mark')}catch(a){b.error(a)}},registerMeasure:function(a,c,e){try{if(b.debug('Register Measure',a,c,e),a){var f={clearMarks:!1,clearMeasures:!1};e=e||{},Object.keys(e).forEach(function(a){f[a]=e[a]}),f.endMark||(this.registerMark(a),f.endMark=a),d.perf.measure(a,f.startMark,f.endMark);var g=this.measureTimeUserTiming(a);g?this.util.addItemToQueue('metrics',new this.metricsData(c,'timer',g,f.tags,f.aggregations,f.aggregationFrequency,f.namespace,f.sampleRate)):b.error('Failed to get measure time to register as timer value'),f.clearMarks&&this.clearMarks([f.startMark,f.endMark]),f.clearMeasures&&this.clearMeasures([a])}else b.error('Undefined resource name to register as a measure')}catch(a){b.error(a)}},timer:function(a,c,d){try{if(b.debug('Register Timer',a,c,d),a&&c>=0){d=d||{};var e=new this.metricsData(a,'timer',c,d.tags,d.agg,d.aggFreq,d.namespace,d.sampleRate);this.util.addItemToQueue('metrics',e)}else b.error('Undefined metric name or invalid value to register as a timer')}catch(a){b.error(a)}},counter:function(a,c,d){try{if(b.debug('Register Counter',a,d),c=c||1,a){d=d||{};var e=new this.metricsData(a,'counter',c,d.tags,d.agg,d.aggFreq,d.namespace,d.sampleRate);this.util.addItemToQueue('metrics',e)}else b.error('Undefined metric name to register as a counter')}catch(a){b.error(a)}},gauge:function(a,c,d){try{if(b.debug('Register Gauge',a,c,d),a&&c){d=d||{};var e=new this.metricsData(a,'gauge',c,d.tags,d.agg,d.aggFreq,d.namespace,d.sampleRate);this.util.addItemToQueue('metrics',e)}else b.error('Undefined metric name/value to register as a gauge')}catch(a){b.error(a)}}};a.statful=d}(window);